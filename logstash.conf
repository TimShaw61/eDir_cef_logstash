# Listen on port udp/5140
input {
  udp {
    port => 5140
    host => "my_host_address"
    tags => "cef"
  }
}

filter {
    if "cef" in [tags] {
        mutate {
            # CEF:0 is pipe delimited, split into individual fields 
            split => [ "message", "|" ]
            # generate fields for the CEF header - but eliminate some...
            #add_field => { "cef_version" => "%{[message][0]}" }
            #add_field => { "cef_device_vendor" => "%{[message][1]}" }
            #add_field => { "cef_device_product" => "%{[message][2]}" }
            #add_field => { "cef_device_version" => "%{[message][3]}" }
            add_field => { "cef_sig_id" => "%{[message][4]}" }
            add_field => { "cef_sig_name" => "%{[message][5]}" }
            add_field => { "cef_sig_severity" => "%{[message][6]}" }
            add_field => { "cef_kv_message" => "%{[message][7]}" }
	    # Consolidate the vendor, product and version into one string...
            add_field => { "cef_device" => "%{[message][1]} %{[message][2]} %{[message][3]}" }
        }

	# 1.An escaped equals sign (\=) is part of an LDAP formatted name. 
	# Avoid treating it as a key-value separator by changing the equals to a hyphen
        # 2.Workaround because `kv` doesn't support values that contain spaces
        # Transform and then use semi-colon to separate fields instead of spaces. 
	# by setting field_split to ";" in the kv.
	# 3.Find an replace all the CN- OU- O- strings created in 1. 
	# and put them back to "CN=" "OU=" and "O=" now we have done separating 
	# the fields with semi-colons 
	
        mutate {
                gsub => ["cef_kv_message", "(\\=)", "-"]
                gsub => ["cef_kv_message", "(\S+=)", ";\1"]
                gsub => ["cef_kv_message", "(CN|OU|O)-", "\1="]
        }

        kv {
            source => "cef_kv_message"
            trim_value => " "
            trim_key => " "
            value_split => "="
            field_split => ";"
            tag_on_failure => "cef_kv_failure"
            remove_field => ["cef_kv_message"]
        }

	# Get timestamp from the CEF rt field and update @timestamp
	date {
		match => [ "rt", "UNIX_MS" ]
		remove_field => [ "[rt]" ]
	}

        # Remap the label key values to become the key name of the corresponding kv pair 
	# If there are spaces in the label value remove them as 
	# keys cannot have spaces.  Then remove the CEF custom fields.
        if [cn1] { 
		mutate { 
			gsub => ["cn1Label", " ", "_" ]
			add_field => { "%{cn1Label}" => "%{cn1}" }
			remove_field => [ "[cn1Label]" ]
			remove_field => [ "[cn1]" ]
		} 
	}

        if [cn2] { 
		mutate { 
			gsub => ["cn2Label", " ", "_" ]
			add_field => { "%{cn2Label}" => "%{cn2}" }
			remove_field => [ "[cn2Label]" ]
			remove_field => [ "[cn2]" ]
		} 
	}

        if [cn3] { 
		mutate { 
			gsub => ["cn3Label", " ", "_" ]
			add_field => { "%{cn3Label}" => "%{cn3}" }
			remove_field => [ "[cn3Label]" ]
			remove_field => [ "[cn3]" ]
		} 
	}

        if [cs1] { 
		mutate { 
			gsub => ["cs1Label", " ", "_" ]
			add_field => { "%{cs1Label}" => "%{cs1}" }
			remove_field => [ "[cs1Label]" ]
			remove_field => [ "[cs1]" ]
		} 
	}
        if [cs2] { 
		mutate { 
			gsub => ["cs2Label", " ", "_" ]
			add_field => { "%{cs2Label}" => "%{cs2}" }
			remove_field => [ "[cs2Label]" ]
			remove_field => [ "[cs2]" ]
		} 
	}

        if [cs3] { 
		mutate { 
			gsub => ["cs3Label", " ", "_" ]
			add_field => { "%{cs3Label}" => "%{cs3}" }
			remove_field => [ "[cs3Label]" ]
			remove_field => [ "[cs3]" ]
		} 
	}

        if [cs4] { 
		mutate { 
			gsub => ["cs4Label", " ", "_" ]
			add_field => { "%{cs4Label}" => "%{cs4}" }
			remove_field => [ "[cs4Label]" ]
			remove_field => [ "[cs4]" ]
		} 
	}

        if [cs5] { 
		mutate { 
			gsub => ["cs5Label", " ", "_" ]
			add_field => { "%{cs5Label}" => "%{cs5}" }
			remove_field => [ "[cs5Label]" ]
			remove_field => [ "[cs5]" ]
		} 
	}

        if [cs6] { 
		mutate { 
			gsub => ["cs6Label", " ", "_" ]
			add_field => { "%{cs6Label}" => "%{cs6}" }
			remove_field => [ "[cs6Label]" ]
			remove_field => [ "[cs6]" ]
		} 
	}

        if [flexNumber1] { 
		mutate { 
			gsub => ["flexNumber1Label", " ", "_" ]
			add_field => { "%{flexNumber1Label}" => "%{flexNumber1}" }
			remove_field => [ "[flexNumber1Label]" ]
			remove_field => [ "[flexNumber1]" ]
		} 
	}

        if [flexNumber2] { 
		mutate { 
			gsub => ["flexNumber2Label", " ", "_" ]
			add_field => { "%{flexNumber2Label}" => "%{flexNumber2}" }
			remove_field => [ "[flexNumber2Label]" ]
			remove_field => [ "[flexNumber2]" ]
		} 
	}

        if [flexString1] { 
		mutate { 
			gsub => ["flexString1Label", " ", "_" ]
			add_field => { "%{flexString1Label}" => "%{flexString1}" }
			remove_field => [ "[flexString1Label]" ]
			remove_field => [ "[flexString1]" ]
		} 
	}

        if [flexString2] { 
		mutate { 
			gsub => ["flexString2Label", " ", "_" ]
			add_field => { "%{flexString2Label}" => "%{flexString2}" }
			remove_field => [ "[flexString2Label]" ]
			remove_field => [ "[flexString2]" ]
		} 
	}

    }

    # match date in attribute value and set it to dmy not mdy
    if [Attribute_Value] =~ /\d{2}\/\d{2}\/\d{2} \d{2}:\d{2}:\d{2}/ {
        date_formatter {
		source => "Attribute_Value"
		pattern => "dd/MM/yy HH:mm:ss"
		target => "Attribute_Value" 
	}
    }

    # Drop uninteresting events...

    if [Class_Name] == "Tree Root" {
	drop { }
    }

    # GELF must have a short_message field - use the already provided short message in "msg"
    if [short_message] !~ /.+/ {
            mutate {
                add_field => { "short_message" => "%{[msg]}" }
		remove_field => ["msg"]
            }
    }

}

# Output to GELF format for graylog server running on same host port 12201
# and output to file in rubydebug format for debugging.
output {

  gelf {
        host => "127.0.0.1"
        port => 12201
  }

  file {
        path => "/var/log/logstash/logstash.out"
	codec => rubydebug
  }

}
